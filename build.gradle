plugins {
	id 'fabric-loom' version '1.+'
	id 'com.matthewprenger.cursegradle' version '1.+'
	id 'com.modrinth.minotaur' version '2.+'
}

import com.modrinth.minotaur.dependencies.ModDependency

group = modGroup
archivesBaseName = modId
version = "$modVersion+$gameVersion"

repositories {
	maven { url 'https://maven.gegy.dev' }
	maven { url 'https://api.modrinth.com/maven'; content { includeGroup 'maven.modrinth' } }
	maven { url 'https://maven.shedaniel.me' }
	maven { url 'https://maven.terraformersmc.com' }
	maven { url 'https://storage.googleapis.com/devan-maven' }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		'simply-no-shading' {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

apply from: 'runs.gradle', to: this

dependencies {
	minecraft "com.mojang:minecraft:$gameVersion"
	mappings loom.officialMojangMappings()
	modClientImplementation 'net.fabricmc:fabric-loader:latest.release'

	// See `dependencies.gradle`
	ext.fabricApi = fabricApi; apply from: 'dependencies.gradle', to: dependencies; ext.fabricApi = null
}

processClientResources {
	def usedPropertyKeys = [ 'javaVersion', 'modId', 'version' ]
	def usedProperties = usedPropertyKeys.collectEntries { [String.valueOf(it), project.findProperty(it)] }

	inputs.properties(usedProperties)

	filesMatching 'fabric.mod.json', {
		expand usedProperties
	}
}

java {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion

	// withJavadocJar()
	withSourcesJar()

	toolchain {
		languageVersion = JavaLanguageVersion.of javaVersion
	}
}

jar {
	from 'LICENSE', {
		rename { "${it}_$project.archivesBaseName" }
	}

	manifest {
		attributes([
			'Implementation-Title': 'Simply No Shading for Fabric',
			'Implementation-Version': archiveVersion,
			'Implementation-Vendor': 'StartsMercury'
		])
	}
}

tasks.withType JavaCompile configureEach {
	options.release = javaVersion.majorVersion as int
}

ext {
	def baseVersion
	def qualifier
	def qualifierName
	def qualifierParts

	changelog = "**View the changelog at:** https://github.com/${System.env.'GITHUB_REPOSITORY'}/wiki/Changelog#${modVersion.replace '.', ''}"

	modVersion.split '-', 2 tap {
		baseVersion = it[0]
		qualifier = it[1] ?: ''
	}

	qualifierParts = qualifier.split(/\./, 2) ?: ['', '-1']

	if (qualifierParts.size() != 2)
		throw new RuntimeException("Non-empty qualifiers are formatted <rc|pre|snapshot>.<int> but was $qualifier")

	switch (qualifierParts[0]) {
	case '':
		qualifierName = ''
		releaseChannel = 'release'
		break
	case 'rc':
		qualifierName = 'Release Candidate'
		releaseChannel = 'beta'
		break
	case 'pre':
		qualifierName = 'Pre-Release'
		releaseChannel = 'beta'
		break
	default:
		qualifierName = 'Snapshot'
		releaseChannel = 'alpha'
		break
	}

	versionName = "$baseVersion${qualifierName ? " $qualifierName ${qualifierParts[1]}" : ''} for Minecraft $gameVersion"
}

curseforge {
	apiKey = System.env.'CURSEFORGE_API_KEY' ?: ''

	project {
		id = '550997'

		changelogType = 'markdown'
		changelog = project.changelog
		relations {
			optionalDependency 'bedrockify'
			optionalDependency 'enhanced-block-entities'
			optionalDependency 'fabric-api'
			optionalDependency 'modmenu'
			optionalDependency 'sodium'
		}

		releaseType = releaseChannel
		addGameVersion gameVersion
		addGameVersion "Java $javaVersion"
		addGameVersion loader.with {
			switch (it) {
				case 'fabric':
					return 'Fabric'
				case 'forge':
					return 'Forge'
				case 'quilt':
					return 'Quilt'
				case 'rift':
					return 'Rift'
			}
		}

		mainArtifact remapJar, {
			displayName = versionName
		}

		afterEvaluate {
			uploadTask.dependsOn 'remapJar'
		}
	}

	options {
		forgeGradleIntegration = false
	}
}

modrinth {
	token = System.env.'MODRINTH_TOKEN'
	projectId = '9gx5Xvc5'

	versionName = project.versionName
	versionType = releaseChannel
	versionNumber = version
	loaders = [ loader ]
	gameVersions = [ gameVersion ]

	changelog = project.changelog
	dependencies = [
		new ModDependency('ox3rDp1B', 'optional'),
		new ModDependency('OVuFYfre', 'optional'),
		new ModDependency('P7dR8mSH', 'optional'),
		new ModDependency('YL57xq9U', 'optional'),
		new ModDependency('mOgUt4GM', 'optional'),
		new ModDependency('AANobbMI', 'optional')
	]

	uploadFile = remapJar
	// additionalFiles = [ remapSourcesJar ]
}
