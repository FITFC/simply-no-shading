buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.+'
	}
}

plugins {
	id 'fabric-loom' version '1.+'
	id 'com.matthewprenger.cursegradle' version '1.+'
	id 'com.modrinth.minotaur' version '2.+'
	id 'org.ajoberstar.grgit' version '3.1.+'
}

import com.modrinth.minotaur.dependencies.ModDependency

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

group = modGroup
archivesBaseName = modId
version = "$modVersion+$gameVersion"

repositories {
	maven { url 'https://maven.gegy.dev' }
	maven { url 'https://api.modrinth.com/maven'; content { includeGroup 'maven.modrinth' } }
	maven { url 'https://maven.shedaniel.me' }
	maven { url 'https://maven.terraformersmc.com' }
	maven { url 'https://storage.googleapis.com/devan-maven' }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		'simply-no-shading' {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

// See `runs.gradle`
apply from: 'runs.gradle', to: this

dependencies {
	minecraft "com.mojang:minecraft:$gameVersion"
	mappings loom.officialMojangMappings()
	modClientImplementation 'net.fabricmc:fabric-loader:latest.release'

	// See `dependencies.gradle`
	ext.fabricApi = fabricApi; apply from: 'dependencies.gradle', to: dependencies; ext.fabricApi = null
}

processClientResources {
	def usedPropertyKeys = [ 'javaVersion', 'modId', 'version' ]
	def usedProperties = usedPropertyKeys.collectEntries { [String.valueOf(it), project.findProperty(it)] }

	inputs.properties(usedProperties)

	filesMatching 'fabric.mod.json', {
		expand usedProperties
	}
}

java {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion

	withJavadocJar()
	withSourcesJar()
}

tasks.withType JavaCompile configureEach {
	options.release = project.javaVersion as int
}

tasks.named 'jar', {
	from 'LICENSE', {
		rename { "${it}_$project.archivesBaseName" }
	}

	manifest {
		attributes([
			'Implementation-Title': 'Simply No Shading',
			'Implementation-Version': archiveVersion,
			'Implementation-Vendor': 'StartsMercury'
		])
	}
}

tasks.named 'javadoc', {
	classpath += sourceSets.client.compileClasspath
	source += sourceSets.client.allJava

	options.addStringOption 'tag', 'implNote:a:Implementation Note:'
}

// See `publishing.gradle`
ext.modrinthDependency = ModDependency.&new; apply from: 'publishing.gradle', to: this; ext.modrinthDependency = null

def getBranch() {
	if (System.env.GITHUB_REF) {
		def branch = System.env.GITHUB_REF

		return branch
	}

	if (grgit == null) {
		return 'unknown'
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf('/') + 1)
}

tasks.register 'github', {
	dependsOn remapJar

	onlyIf {
		def tokenExists = System.env.GITHUB_TOKEN
		def nonAlpha = project.releaseChannel in [ 'release', 'beta' ]

		return tokenExists // && nonAlpha
	}

	doLast {
		def github = GitHub.connectUsingOAuth(System.env.GITHUB_TOKEN as String)
		def repository = github.getRepository(System.env.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name(project.versionName)
		releaseBuilder.body(project.changelog)
		releaseBuilder.commitish(getBranch())
		releaseBuilder.prerelease(project.releaseChannel != 'release')

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(remapJar.archiveFile.get().asFile, 'application/java-archive');
	}
}
