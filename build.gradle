plugins {
	alias libs.plugins.fabric.loom
	alias libs.plugins.loom.quiltflower
}

apply from: 'runtime.gradle'

group = modGroup
archivesBaseName = modName
version = "${libs.versions.minecraft.get()}-${modVersion}"

repositories {
	maven { url 'https://api.modrinth.com/maven'; content { includeGroup 'maven.modrinth' } }
	maven { url 'https://jitpack.io' }
	maven { url 'https://maven.gegy.dev' }
	maven { url 'https://maven.quiltmc.org/repository/release' }
	maven { url 'https://maven.shedaniel.me' }
	maven { url 'https://maven.terraformersmc.com' }
	maven { url 'https://storage.googleapis.com/devan-maven' }
}

dependencies {
	// BedrockIfy
	modCompileOnly libs.bedrockify

	// Enhanced Block Entities
	modCompileOnly libs.enhancedblockentities

	// Fabric Key Binding API (V1)
	modCompileOnly fabricApi.module('fabric-key-binding-api-v1', libs.versions.fabric.api.get())

	// Fabric Lifecycle Events (V1)
	modCompileOnly fabricApi.module('fabric-lifecycle-events-v1', libs.versions.fabric.api.get())

	// Fabric Loader
	modImplementation libs.fabric.loader

	// Iris
	modCompileOnly libs.iris

	// Minecraft
	minecraft libs.minecraft

	// ModMenu
	modCompileOnly libs.modmenu

	// Official Mojang Mappings
	mappings loom.officialMojangMappings()

	// Sodium
	modCompileOnly libs.sodium
}

processResources {
	inputs.property 'version', version

	filesMatching 'fabric.mod.json', {
		expand 'bedrockify_version': libVersionRange('bedrockify'),
		       'enhanced_block_entities_version': libVersionRange('enhancedblockentities'),
		       'fabric_version': libVersionRange('fabric-api'),
		       'iris_version': libVersionRange('iris'),
		       'java_version': libVersionRange('java'),
		       'loader_version': libVersionRange('fabric-loader'),
		       'minecraft_version': libVersionRange('minecraft'),
		       'modmenu_version': libVersionRange('modmenu'),
		       'sodium_version': libVersionRange('sodium'),
		       'version': version
	}
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(libVersion('java'))

	withSourcesJar()
}

jar {
	from 'LICENSE', {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

def encompass(String string, int left, int right = 0) {
	return string[left..<string.length() - right]
}

def libVersion(String name) {
	final def keys = name.split(/\P{Alnum}+/)
	def map = libs.versions

	for (key in keys) {
		map = map[key]
	}

	final def range = map.get() as String
	
	if (range.endsWith('.+'))
		return encompass(range, 0, 2)
	else
		return mavenVersion(range) ?: range
}

def libVersionRange(String name) {
	final def keys = name.split(/\P{Alnum}+/)
	def map = libs.versions

	for (key in keys) {
		map = map[key]
	}

	final def range = map.get() as String
	
	if (range.endsWith('.+'))
		return "${encompass range, 0, 2}.x"
	else
		return mavenVersionRange(range) ?: range
}

def mavenVersion(String range) {
	final def delimiter = range.indexOf ','

	if (delimiter == -1) return '';

	final def lowerBound = range[1 ..< delimiter]

	switch (lowerBound ? range[0] : '') {
	case '[': case '(': case ']': return lowerBound
	}

	final def upperBound = encompass range, delimiter + 1, 1

	switch (upperBound ? range[range.length() - 1] : '') {
	case '[': case '(': case ']': return upperBound
	}

	return ''
}

def mavenVersionRange(String range) {
	final def delimiter = range.indexOf ','

	if (delimiter == -1) return '';

	final def joiner = new StringJoiner(' ')
	final def lowerBound = range[1 ..< delimiter]
	final def upperBound = encompass range, delimiter + 1, 1
	
	switch (lowerBound ? range[0] : '') {
	case '[': joiner.add ">=${lowerBound}"; break
	case '(': case ']': joiner.add ">${lowerBound}"; break
	}
	
	switch (upperBound ? range[range.length() - 1] : '') {
	case '[': joiner.add "<=${upperBound}"; break
	case '(': case ']': joiner.add "<${upperBound}"; break
	}

	return joiner as String
}
