plugins {
	alias libs.plugins.fabric.loom
	alias libs.plugins.loom.quiltflower
	alias libs.plugins.quilt.mappings.on.loom
}

apply from: 'runtime.gradle'
apply from: 'versioning.gradle'

group = modGroup
archivesBaseName = modName
version = "${modVersion}+mc${libs.versions.minecraft.get()}"

repositories {
	maven { url 'https://api.modrinth.com/maven'; content { includeGroup 'maven.modrinth' } }
	maven { url 'https://jitpack.io' }
	maven { url 'https://maven.gegy.dev' }
	maven { url 'https://maven.quiltmc.org/repository/release' }
	maven { url 'https://maven.quiltmc.org/repository/snapshot' }
	maven { url 'https://maven.shedaniel.me' }
	maven { url 'https://maven.terraformersmc.com' }
	maven { url 'https://storage.googleapis.com/devan-maven' }
}

dependencies {
	// BedrockIfy
	modCompileOnly libs.bedrockify

	// Enhanced Block Entities
	modCompileOnly libs.enhancedblockentities

	// Fabric Key Binding API (V1)
	modCompileOnly fabricApi.module('fabric-key-binding-api-v1', versionRanges.fabric.api)

	// Fabric Lifecycle Events (V1)
	modCompileOnly fabricApi.module('fabric-lifecycle-events-v1', versionRanges.fabric.api)

	// Fabric Loader
	modImplementation libs.fabric.loader

	// Iris
	modCompileOnly libs.iris

	// Minecraft
	minecraft libs.minecraft

	// ModMenu
	modCompileOnly libs.modmenu

	// Layered Mappings
	mappings loom.layered {
		addLayer quiltMappings.mappings("org.quiltmc:quilt-mappings:${versionRanges.quilt.mappings}:v2")
		officialMojangMappings()
	}

	// Sodium
	modCompileOnly libs.sodium
}

processResources {
	inputs.property 'version', version

	filesMatching 'fabric.mod.json', {
		expand(['version': version] + semversions)
	}
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(versions.java)

	withSourcesJar()
}

jar {
	from 'LICENSE', {
		rename { "${it}_${project.archivesBaseName}" }
	}
}
