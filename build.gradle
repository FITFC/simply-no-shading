plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = getModVersion()
group = project.maven_group

repositories {
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://jitpack.io" }
	maven { url = "https://maven.shedaniel.me" }
	maven { url = "https://maven.terraformersmc.com" }
}

dependencies {
	// Minecraft Fabric
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${loader_version}"

	// Fabric Key Binding API (V1)
    includeModImplementation fabricApi.module('fabric-key-binding-api-v1', project.fabric_version)
    
	// Fabric Lifecycle Events (V1)
    includeModImplementation fabricApi.module('fabric-lifecycle-events-v1', project.fabric_version)
    
	// Fabric Rendering Data Attachments (V1)
    modRuntimeOnly fabricApi.module('fabric-rendering-data-attachment-v1', project.fabric_version)
    
	// Fabric Rendering Fluids (V1)
    modRuntimeOnly fabricApi.module('fabric-rendering-fluids-v1', project.fabric_version)
	
	// JOML
	runtimeOnly "org.joml:joml:${joml_version}"
	
	// Lazy DFU makes the dev env start up much faster by loading DataFixerUpper
	// lazily, which would otherwise take a long time. We rarely need it anyway.
	modRuntimeOnly("com.github.astei:lazydfu:${lazydfu_version}") {
		exclude(module: 'fabric-loader')
	}

	// Sodium
	modImplementation "maven.modrinth:sodium:${sodium_version}"
}

sourceSets {
	dev {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

loom {
	accessWidenerPath = file('src/main/resources/simply-no-shading.accesswidener')

	runs {
		devClient {
			client()
			name = 'Dev Client'
			source sourceSets.dev
		}
		devServer {
			server()
			name = 'Dev Server'
			source sourceSets.dev
		}
	}

	runConfigs.forEach(runConfig -> runConfig.vmArgs '-Dmixin.debug.export=true')
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

final String getModVersion() {
	final String githubRunNumber = System.env.GITHUB_RUN_NUMBER
	String modVersion = project.mod_version

	if (githubRunNumber != null) {
		modVersion += '-build.' + githubRunNumber
	} else {
		modVersion += '-local.' + toFullHexString(globalNanoTime())
	}

	return modVersion
}

final long globalNanoTime() {
	final java.time.Instant now = java.time.Instant.now();

	return now.epochSecond * 1_000_000_000L + now.nano
}

final def includeModImplementation(final def dependency) {
	dependencies.modImplementation(dependency)
	return dependencies.include(dependency)
}

final int nonnegative(final int i) {
	return i < 0 ? 0 : i
}

final String padLeft(final int ch = ' ', final int pad, final String s) {
	return Character.toString(ch).repeat(nonnegative(pad - s.length())) + s;
}

final String toFullHexString(final long l) {
	return padLeft((int) '0', 16, Long.toHexString(l));
}
