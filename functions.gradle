import groovy.transform.Immutable

import java.nio.file.Files
import java.nio.file.NoSuchFileException

ext {
	loadProperties = { obj ->
		if (obj instanceof java.nio.file.Path) {
			final def properties = new Properties();
		
			try (final def reader = Files.newBufferedReader(obj)) {
				properties.load(reader);
			} catch (final NoSuchFileException nsfe) {
			} catch (final IOException ioe) {
				throw new UncheckedIOException(ioe);
			}
		
			return properties
		} else if (obj instanceof File) {
			return loadProperties(obj.toPath())
		} else {
			return loadProperties(file(Objects.toString(obj)))
		}
	}

	toIdentifier = { text ->
		return toIdentifierPartOrTitleCase(text, false)
	}

	toIdentifierPart = { text ->
		return toIdentifierPartOrTitleCase(text, false, true)
	}

	toSemverRange = { String range, Closure action = null ->
		range = range?.strip() ?: ''

		switch (range) {
			case 'latest.integration':
			case 'latest.release':
			case 'latest-status':
			case '': return '*'
			default: break
		}

		if (!action) action = { it }

		if (range.endsWith('.+')) {
			return "${range[0..< range.size() - 2]}.x".with(action)
		}

		final def delimiter = range.indexOf ','

		if (delimiter == -1) return range.with(action)

		final def joiner = new StringJoiner(' ')
		final def lowerBound = range[1 ..< delimiter].strip()
		final def upperBound = range[delimiter + 1 ..< range.size() - 1].strip()

		joiner.emptyValue = '*'
		
		switch (lowerBound ? range[0] : ' ') {
		case '[': joiner.add ">=${lowerBound.with action}"; break
		case '(': case ']': joiner.add ">${lowerBound.with action}"; break
		}

		switch (upperBound ? range[range.length() - 1] : ' ') {
		case ']': joiner.add "<=${upperBound.with action}"; break
		case ')': case '[': joiner.add "<${upperBound.with action}"; break
		}

		return joiner as String
	}

	toTitleCase = { text ->
		return toIdentifierPartOrTitleCase(text, true)
	}
}

def toIdentifierPartOrTitleCase(def text, boolean nonAlnum, boolean part = false) {
	if (text == null) return

	text = String.valueOf(text)

	final def builder = new StringBuilder(text.size())
	def start = !nonAlnum && !part
	def wouldTitleCase = true

	for (int ch in text) {
		if (Character.isLetterOrDigit(ch)) {
			if (!start) {
				builder.appendCodePoint wouldTitleCase ? Character.toTitleCase(ch) : ch
			} else {
				builder.appendCodePoint Character.toLowerCase(ch)
				start = false
			}

			wouldTitleCase = false
		} else {
			if (nonAlnum) builder.appendCodePoint ch
			wouldTitleCase = true
		}
	}

	return builder as String
}
